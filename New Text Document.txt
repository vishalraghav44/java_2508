    <%@ taglib uri="http://www.springframework.org/tags/form" prefix="form"%>  
    <%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>  
<script src="http://canvasjs.com/assets/script/canvasjs.min.js"></script>
	<h1>Employees List</h1>
	<table border="2" width="70%" cellpadding="2">
	<tr><th>Department</th><th>Quantity</th></tr>
    <c:forEach var="emp" items="${list}"> 
    <tr>
    <td>${emp.department}</td>
    <td>${emp.quantity}</td>
    </tr>
    </c:forEach>
    </table>
    <br/>
    
    
    
    
    
    
    
    
   <script type="text/javascript">
   function validateform(){  
	   var name=document.myform.id.value;  
	   if(name==null)
		   {
		   alert("please enter an employee id first");
		   return false;
		   }
	
	
}
window.onload = function () {
	var chart = new CanvasJS.Chart("chartContainer", {
		theme: "theme2",//theme1
		title:{
			text: "NUCLEUS SOFTWARES"              
		},
		animationEnabled: false,   // change to true
		data: [              
		{
			// Change type to "bar", "area", "spline", "pie",etc.
			type: "column",
			dataPoints: [
				
				
				<c:forEach var="emp" items="${list}"> 
				{ label: "${emp.department}",  y:${emp.quantity},click: function(e){ window.location="${emp.id}";}  },			   			 			   
			    </c:forEach>
			
			]
		}
		]
	});
	chart.render();
}
</script>


    





<body>
<div id="chartContainer" style="height: 300px; width: 100%;"></div>

<c:if  test="${!empty deptlist}">
<form:form action="search" name="myform" method="POST" onSubmit="return validateform()">
ENTER EMPLOYEE ID 
   <table >  
         <tr>  
          <td>Input id : </td> 
          <td><input type="text" name="id" /></td>
         </tr>
         <tr>  
          <td><input type="hidden" name="dept" value=${myemp.id}></td>  
          <td><input type="submit" value="Search" name="op" /></td>  
           <td><input type="submit" value="Delete" name="op" /></td> 
           <td><input type="submit" value="Modify" name="op" /></td> 
         </tr> 
         <tr>
         <td>
         </table>
         </form:form>
        
        
        <form:form method="post" action="addemp" commandName="command">
             
    <table>
    <tr>
        <td><form:label path="name">Name</form:label></td>
        <td><form:input path="name" /></td>
    </tr>
    <tr>
        <td><form:label path="salary">Salary</form:label></td>
        <td><form:input path="salary" /></td>
    </tr>
    <tr>
        <td><form:label path="designation">Email</form:label></td>
        <td><form:input path="designation" /></td>
    </tr>
    <tr>
       <td><input type="hidden" name="departmentid" value=${myemp.id}></td>
    </tr>
    <tr>
        <td colspan="2">
            <input type="submit" value="add""/>
        </td>
    </tr>
</table> 
</form:form>
        
        
        
        
        
        
        
        
        
         <form:form action="order" method="POST" >
         Order By
         <tr>
         <td>
      <select name="orderby">
           <option value="id">id</option>
           <option value="name">name</option>
           <option value="salary">salary</option>
      </select>
      </td>
      <td>
      Order in
       <select name="orderin">
           <option value="asc">ascending</option>
           <option value="desc">descending</option>
       </select>
       <input type="hidden" name="dept" value=${myemp.id}>
      </td>
      <td>
      <input type="submit" value="order" />
      </td>
         </tr>
       </table>  
   </form:form>
<table border="2" width="70%" cellpadding="2">
	<tr>
    <th>ID</th>
    <th>NAME</th>
    <th>SALARY</th>
    <th>DESIGNATION</th>
    <th>DEPARTMENT ID</th>
    </tr>
	
    <c:forEach var="emp" items="${deptlist}"> 
    <tr>
    <td>${emp.id}</td>
    <td>${emp.name}</td>
    <td>${emp.salary}</td>
    <td>${emp.designation}</td>
    <td>${myemp.id}</td>
    </tr>
    </c:forEach>
    </table>
    <br/>
</c:if>
<c:if  test="${!empty deptlist1}">
<table border="2" width="70%" cellpadding="2">
	<tr>
    <th>ID</th>
    <th>NAME</th>
    <th>SALARY</th>
    <th>DESIGNATION</th>
    <th>DEPARTMENT ID</th>
    </tr>
	
    <c:forEach var="emp" items="${deptlist1}"> 
    <tr>
    <td>${emp.id}</td>
    <td>${emp.name}</td>
    <td>${emp.salary}</td>
    <td>${emp.designation}</td>
    
    </tr>
    </c:forEach>
    </table>
    <br/>


</c:if>


<c:if  test="${!empty searcher}">
<table border="2" width="70%" cellpadding="2">
	<tr>
    <th>ID</th>
    <th>NAME</th>
    <th>SALARY</th>
    <th>DESIGNATION</th>
    <th>DEPARTMENT ID</th>
    </tr>


<tr>
    <td>${searcher.id}</td>
    <td>${searcher.name}</td>
    <td>${searcher.salary}</td>
    <td>${searcher.designation}</td>
    
    </tr>
    </table>
</c:if>




<c:if  test="${!empty modifyempl}">
<form:form method="post" action="modifyemp" commandName="command">
    <table>
        <tr>
        
    </tr>
    <tr>
        <td> <form:input path="id" value="${modifyempl.id}" readonly="true" /></td>
        <td><form:label path="name">Name</form:label></td>
        <td><form:input path="name" value="${command.name}" /></td>
    </tr>
    <tr>
        <td><form:label path="salary">Salary</form:label></td>
        <td><form:input path="salary"  value="${command.salary}" /></td>
    </tr>
    <tr>
        <td><form:label path="designation">Email</form:label></td>
        <td><form:input path="designation" value="${command.designation}"/></td>
    </tr>
    <tr>
         
       <td><input type="hidden" name="departmentid" value=${myemp.id}></td>
    </tr>
    
    <tr>
        <td colspan="2">
            <input type="submit" value="modify""/>
        </td>
    </tr>
</table> 
</form:form>

</c:if>












</body>
    























controller



package com.howtodoinjava.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import com.howtodoinjava.entity.Details;
import com.howtodoinjava.entity.Employee;
import com.howtodoinjava.entity.EmployeeEntity;
import com.howtodoinjava.service.EmployeeManager;
import com.howtodoinjava.service.EmployeeManagerImpl;

@Controller
public class EditEmployeeController {
	
	@Autowired
	private EmployeeManager employeeManager;
	
	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String listEmployees(ModelMap map) 
	{
		map.addAttribute("employee", new EmployeeEntity());
		map.addAttribute("employeeList", employeeManager.getAllEmployees());
		
		return "editEmployeeList";
	}
	
	
	
	@RequestMapping(value = "/deptstrength", method = RequestMethod.GET)
	public String deptStrength(Model model) 
	{
		List<Details> list=employeeManager.deptStrength();
		System.out.println("inside checker");
		System.out.println("inside checker");
		System.out.println("inside checker");
		System.out.println("inside checker");
		System.out.println("inside checker");
		//map.addAttribute("employee", new EmployeeEntity());
		//map.addAttribute("employeeList", employeeManager.getAllEmployees());
		model.addAttribute("list",list );
		return "viewemp";
	}
	
	
	


	@RequestMapping(value="/order",method = RequestMethod.POST)
	public String order(@RequestParam("orderby") String orderby,@RequestParam("orderin") String orderin,@RequestParam("dept") int  dept,Model model){
		System.out.println("inside order in controller ");
		System.out.println(orderby);
	System.out.println(orderin);
	System.out.println(dept);
	List<Details> list1=employeeManager.deptStrength();
	
	List<Employee> list=employeeManager.order(orderby,orderin,dept);
	model.addAttribute("deptlist1", list);
	model.addAttribute("list",list1);
	
	return "viewemp";
	}
	
	
	
	
	
	
	
	
	@RequestMapping(value="/{id}")
	public String edit(@PathVariable int id,Model model){
		System.out.println("inside getit");
		List<Employee> list=employeeManager.getAllFromDept(id);
		for(Employee d:list)
		{
		System.out.println("employee name="+d.getName());	
		}
		List<Details> list1=employeeManager.deptStrength();
		for(Details d:list1)
		{
		System.out.println("department="+d.getId());	
		}
		model.addAttribute("list", list1);
		model.addAttribute("deptlist", list);
		model.addAttribute("command",new Employee());
		Details d=new Details();		
		d.setId(id);
		
		model.addAttribute("myemp",d);
		
		return "viewemp";
	}
	
	@RequestMapping(value="/search",method = RequestMethod.POST)
	public String save(@RequestParam("id") int id,@RequestParam("dept") int dept,@RequestParam("op") String operation,Model model){
		
		
		if(operation.equals("Search"))
		{
				List<Details> list=employeeManager.deptStrength();
		Employee empl=employeeManager.search(id,dept);
		model.addAttribute("list", list);
		model.addAttribute("searcher", empl);
		return "viewemp";//will redirect to viewemp request mapping
		}
		if(operation.equals("Delete"))
		{
			
			
			System.out.println("succesful");
			System.out.println("succesful");
			System.out.println("succesful");
			employeeManager.delete(id);
			System.out.println("succesful");
			System.out.println("succesful");
			
			return "redirect:/"+dept;

		}
		
		
		
		if(operation.equals("Modify"))
		{
			List<Details> list=employeeManager.deptStrength();
			Employee empl=employeeManager.search(id,dept);
			System.out.println("id="+empl.getId());
			System.out.println("name="+empl.getName());
			System.out.println("designation="+empl.getDesignation());
			System.out.println("salary="+empl.getSalary());
			System.out.println(empl.getDepartment().getName());
			model.addAttribute("list", list);
			model.addAttribute("command",empl);
			model.addAttribute("modifyempl", empl);
			Details d=new Details();
			d.setId(dept);
			model.addAttribute("myemp",d);
			return "viewemp";
		}
		
		
		
		
		
		
		return "redirect:/"+dept;
	}
	
	
	
	
	
	@RequestMapping(value = "/addemp", method = RequestMethod.POST)
	public String add(@ModelAttribute(value="command") Employee employee,@RequestParam(value="departmentid") Integer departmentid) 
	{
		employeeManager.add(employee,departmentid);
		return "redirect:/"+departmentid;
	}
	
	
	@RequestMapping(value = "/modifyemp", method = RequestMethod.POST)
	public String modify(@ModelAttribute(value="command") Employee employee,@RequestParam(value="departmentid") Integer departmentid) 
	{
		
		System.out.println("id="+employee.getId());
		System.out.println("name="+employee.getName());
		System.out.println("designation="+employee.getDesignation());
		System.out.println("salary="+employee.getSalary());
		//System.out.println(employee.getDepartment().getName());
		
		
		
		employeeManager.modify(employee,departmentid);
		System.out.println("operation succeeded");
		return "redirect:/"+departmentid;
		
		
	}
	
	
	
	
	

	@RequestMapping(value = "/add", method = RequestMethod.POST)
	public String addEmployee(@ModelAttribute(value="employee") EmployeeEntity employee, BindingResult result) 
	{
		employeeManager.addEmployee(employee);
		return "redirect:/";
	}

	@RequestMapping("/delete/{employeeId}")
	public String deleteEmplyee(@PathVariable("employeeId") Integer employeeId)
	{
		employeeManager.deleteEmployee(employeeId);
		return "redirect:/";
	}

	public void setEmployeeManager(EmployeeManagerImpl employeeManager) {
		this.employeeManager = employeeManager;
	}
}


























package com.howtodoinjava.dao;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.hibernate.Query;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.howtodoinjava.entity.Department;
import com.howtodoinjava.entity.Details;
import com.howtodoinjava.entity.Employee;
import com.howtodoinjava.entity.EmployeeEntity;



@Repository
public class EmployeeDaoImpl implements EmployeeDAO  {

	@Autowired
    private SessionFactory sessionFactory;
	
	@Override
	public void addEmployee(EmployeeEntity employee) {
		this.sessionFactory.getCurrentSession().save(employee);
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<EmployeeEntity> getAllEmployees() {
		return this.sessionFactory.getCurrentSession().createQuery("from EmployeeEntity").list();
	}
     
	@SuppressWarnings("unchecked")
	@Override
	
	public List<Details>  deptStrength()
	{
		System.out.println("hthjfgkjggjkfgjkjk");
		List<Details> list=new ArrayList<Details>();
		Details details;
		  
		  String SQL_QUERY = "SELECT d.id,d.name,Count(e.id) FROM Employee e INNER JOIN e.department d group by d.id,d.name";
		  Query query = this.sessionFactory.getCurrentSession().createQuery(SQL_QUERY);
		  
		  System.out.println("----------111----------------");
		    
		  for(Iterator it=query.iterate();it.hasNext();)
		  {
			  System.out.println("----------22222----------------");
		   Object[] row = (Object[]) it.next();
		   details=new Details();
		   details.setId((Integer)row[0]);
		   details.setDepartment((String)row[1]);
		   details.setQuantity((Long)row[2]);
		   
		  list.add(details);
		   System.out.print("Last Name: " + row[0]);
		   System.out.println(" | Number of lastname: " + row[1]);
		   System.out.println("wefsdfsd="+row[2]);
		  }
		  System.out.println("----------33333333----------------");
	      return list;
	
	}
	
	
	
	
	@Override
	public void deleteEmployee(Integer employeeId) {
		
		EmployeeEntity employee = (EmployeeEntity) sessionFactory.getCurrentSession().load(
				EmployeeEntity.class, employeeId);
        if (null != employee) {
        	this.sessionFactory.getCurrentSession().delete(employee);
        	
        }
	}

	
	
	
	
	
	
	
	
	
	@Override
	public List<Employee> getAllFromDept(int id) {
		// TODO Auto-generated method stub
		String sql="from Employee e where e.department.id="+id;
		return this.sessionFactory.getCurrentSession().createQuery(sql).list();
	}

	@Override
	public Employee search(int id, int dept) {
		// TODO Auto-generated method stub
		String sql="from Employee e where e.department.id="+dept+" and e.id="+id;
		List<Employee>list= this.sessionFactory.getCurrentSession().createQuery(sql).list();
	    if(list.size()!=0)
	    {
	    	return list.get(0);
	
	    }
	   return new Employee();
	
	}

	@Override
	public List<Employee> order(String orderby, String orderin, int dept) {
		// TODO Auto-generated method stub
		
		String sql="from Employee e where e.department.id="+dept+" order by "+orderby+" "+orderin;
		List<Employee>list= this.sessionFactory.getCurrentSession().createQuery(sql).list();
	    
		
		return list;
	}

	@Override
	public void add(Employee employee, Integer departmentid) {
		// TODO Auto-generated method stub
		Department department = (Department)sessionFactory.getCurrentSession().get(Department.class,departmentid);
		employee.setDepartment(department);
		this.sessionFactory.getCurrentSession().persist(employee);
	}

	@Override
	public void delete(int id) {
		// TODO Auto-generated method stub
		Employee employee = (Employee)sessionFactory.getCurrentSession().load(Employee.class,id);
        if (null != employee) {
        	this.sessionFactory.getCurrentSession().delete(employee);
	}
	}

	@Override
	public void modify(Employee employee,Integer departmentid) {
		// TODO Auto-generated method stub
		Department department = (Department)sessionFactory.getCurrentSession().get(Department.class,departmentid);
		employee.setDepartment(department);
		this.sessionFactory.getCurrentSession().update(employee);
		
	}

}

























SERVICE


package com.howtodoinjava.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.howtodoinjava.dao.EmployeeDAO;
import com.howtodoinjava.dao.EmployeeDaoImpl;
import com.howtodoinjava.entity.Details;
import com.howtodoinjava.entity.Employee;
import com.howtodoinjava.entity.EmployeeEntity;

@Service
public class EmployeeManagerImpl implements EmployeeManager {
	
	@Autowired
    private EmployeeDAO employeeDAO;

	@Override
	@Transactional
	public void addEmployee(EmployeeEntity employee) {
		employeeDAO.addEmployee(employee);
	}

	@Override
	@Transactional
	public List<EmployeeEntity> getAllEmployees() {
		return employeeDAO.getAllEmployees();
	}

	@Override
	@Transactional
	public void deleteEmployee(Integer employeeId) {
		employeeDAO.deleteEmployee(employeeId);
	}

	public void setEmployeeDAO(EmployeeDAO employeeDAO) {
		this.employeeDAO = employeeDAO;
	}

	
	@Override
	@Transactional
	public List<Details> deptStrength()
	{
		return employeeDAO.deptStrength();
	}

	@Override
	@Transactional
	public List<Employee> getAllFromDept(int id) {
		// TODO Auto-generated method stub
		return employeeDAO.getAllFromDept(id);
	}

	@Override
	@Transactional
	public Employee search(int id, int dept) {
		// TODO Auto-generated method stub
		return employeeDAO.search(id,dept);
	}

	@Override
	@Transactional
	public List<Employee> order(String orderby, String orderin, int dept) {
		// TODO Auto-generated method stub
		return employeeDAO.order(orderby,orderin,dept);
	}

	@Override
	@Transactional
	public void add(Employee employee, Integer departmentid) {
		// TODO Auto-generated method stub
		employeeDAO.add(employee,departmentid);
	}

	@Override
	@Transactional
	public void delete(int id) {
		// TODO Auto-generated method stub
		employeeDAO.delete(id);
	}

	@Override
	@Transactional
	public void modify(Employee employee,Integer departmentid) {
		// TODO Auto-generated method stub
		employeeDAO.modify(employee,departmentid);
		
	}
	
	
}
